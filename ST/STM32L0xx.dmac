_ExecDeviceExecutionStarted()
{
  if (__driverType("ijet") || __driverType("cmsisdap"))
  {
    // Allow debugging in power saving modes.

    __var dbgmcu_cr;

    dbgmcu_cr = __readMemory32(0x40015804, "Memory");

    if ((dbgmcu_cr & 0x7) != 0x7) {

      dbgmcu_cr |= 7; // set DBGMCU_CR.DBG_SLEEP, DBG_STOP and DBG_STANDBY.

      __writeMemory32(dbgmcu_cr, 0x40015804, "Memory");
      __message "DBGMCU_CR set to inhibit sleep-mode while debugging";
    }
  }
}


unlockFlash()
{
  // unlock Flash program and erase controller

  if(0x1 & __readMemory32(0x40022004,"Memory"))
  {
    __message "Unlocking FLASH";

    __writeMemory32(0x89ABCDEF, 0x4002200C, "Memory"); // FLASH->PEKEYR = FLASH_PEKEY1;
    __writeMemory32(0x02030405, 0x4002200C, "Memory"); // FLASH->PEKEYR = FLASH_PEKEY2;

  }
  else
  {
     __message "FLASH is already unlocked";
  }

}


lockFlash()
{
  // lock Flash program and erase controller

  if(!(0x1 & __readMemory32(0x40022004,"Memory")))
  {
    __message "Locking FLASH";

    __var temp_cr;
    temp_cr = __readMemory32(0x40022004,"Memory");
    __writeMemory32(temp_cr | 0x1, 0x40022004, "Memory"); // Set lock bit;

  }
  else
  {
    __message "FLASH is already locked";
  }

}

setOptionBytesWriteEnable()
{
  //Write enable for option bytes area

  if(0x4 & __readMemory32(0x40022004,"Memory"))
  {

    unlockFlash();

    __writeMemory32(0xFBEAD9C8, 0x40022014, "Memory"); // FLASH->OPTKEYR = FLASH_OPTKEY1;
    __writeMemory32(0x24252627, 0x40022014, "Memory"); // FLASH->OPTKEYR = FLASH_OPTKEY2;

    __message "Option bytes write enabled";

  }

}


readProtectionEnable()
{

  if ((0xFF & __readMemory32(0x4002201C,"Memory")) == 0xAA)
  {

    setOptionBytesWriteEnable();

    __message "Setting FLASH readout protection";

    __writeMemory32(0x00000200, 0x40022004, "Memory"); // Option byte erase

    __writeMemory32(__readMemory32(0x1FF80000,"Memory") & 0xFFFF0000, 0x1FF80000, "Memory");     // Enable readout protection

    while(0x1 & __readMemory32(0x40022018,"Memory"));  // Wait while FLASH busy

    __writeMemory32(0x40000 | __readMemory32(0x40022004,"Memory"), 0x40022004, "Memory");

    __hwReset(0); // Reset to make changes take effect

  }
  else
  {
    __message "Readout protection already set";
  }

}


readProtectionDisable()
{

  if ((0xFF & __readMemory32(0x4002201C,"Memory")) != 0xAA)
  {

    setOptionBytesWriteEnable();

    __message "Reset FLASH readout protection";

    __writeMemory32(0x00000008, 0x40022004, "Memory");
    __writeMemory32(0x005500AA, 0x1FF80000, "Memory"); // Disable readout protection

    __delay(100);

    while(0x1 & __readMemory32(0x40022018,"Memory"))  // Wait while FLASH busy
    {

      __delay(100);

    }

    __writeMemory32(0x40000 | __readMemory32(0x40022004,"Memory"), 0x40022004, "Memory");

    __hwReset(0); // Reset to make changes take effect

  }
  else
  {
    __message "Readout protection already reset";
  }

}


getPersistentQuickLaunchMacros()   // <-- Reserved name, debugger calls it to populate QuickLaunch view.
{
  __message "getPersistentQuickLaunchMacros";
  __var macs;

  macs = "unlockFlash()";
  macs += ";lockFlash()";
  macs += ";readProtectionDisable()";
  macs += ";readProtectionEnable()";
  macs += ";setOptionBytesWriteEnable()";

  return macs;
}

