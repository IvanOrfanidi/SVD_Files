execConfigureTraceETM()
{
  __var value;

  value = __readMemory32(0xE0042004, "Memory");
  // STM32 specific register Debug MCU configuration: => Trace_IOEN
  // DBG_MCU_CR : assign SYNC TRACE I/Os for
  // this outputs a sync packet of FF_FF_FF_7F
  // TRACE_IOEN = 1, DBG_SLEEP = 0, DBG_STOP = 0, DBG_STANDBY = 0 ???
  value &= ~0xE0;
  
  if ( __getTracePortSize() == 1 )
  {
    value |= 0x60; // bit 7,6,5  TRACE_MODE=01 TRACE_IOEN=1
  } 
  else
  if ( __getTracePortSize() == 2 )
  {
    value |= 0xA0; // bit 7,6,5  TRACE_MODE=10 TRACE_IOEN=1
  } 
  else   // default 4 bits
  {
    value |= 0xE0; // bit 7,6,5  TRACE_MODE=11 TRACE_IOEN=1
  }
    
  __writeMemory32(value, 0xE0042004, "Memory");
}

execConfigureTraceSWO()
{
  __var value;
  
  value = __readMemory32(0xE0042004, "Memory");
  value &= ~0xE0;
  value |= 0x20;  // bit 7,6,5  TRACE_MODE=00 TRACE_IOEN=1
  __writeMemory32(value, 0xE0042004, "Memory");

}


unlockFlash()
{
  // unlock Flash program and erase controller

  if(0x80 & __readMemory32(0x40008010,"Memory"))
  {
    __message "Unlocking FLASH";
    
    __writeMemory32(0x45670123, 0x40008004, "Memory"); // FLASH->FKEYR = FLASH_KEY1;
    __writeMemory32(0xCDEF89AB, 0x40008004, "Memory"); // FLASH->FKEYR = FLASH_KEY2;
    __writeMemory32(0xFFFFFFF8 & __readMemory32(0x40008000,"Memory"), 0x40008000, "Memory"); // Flash 0 wait state

  }
  else
  {
     __message "FLASH is already unlocked";
  }

}


lockFlash()
{
  // lock Flash program and erase controller
  
  if(!(0x80 & __readMemory32(0x40008010,"Memory")))
  {
    __message "Locking FLASH";
    
    __var temp_cr;
    temp_cr = __readMemory32(0x40008010,"Memory");
    __writeMemory32(temp_cr | 0x80, 0x40008010, "Memory"); // Set lock bit;
  
  }
  else
  {
    __message "FLASH is already locked";
  }

}

setOptionBytesWriteEnable()
{
  //Write enable for option bytes area

  if(!(0x200 & __readMemory32(0x40008010,"Memory")))
  {
  
    unlockFlash();
  
    __writeMemory32(0x45670123, 0x40008008, "Memory"); // FLASH->OPTKEYR = FLASH_OPTKEY1;
    __writeMemory32(0xCDEF89AB, 0x40008008, "Memory"); // FLASH->OPTKEYR = FLASH_OPTKEY2; 
    
    __message "Option bytes write enabled";
  
  }

}


readProtectionEnable()
{

  if (!(0x2 & __readMemory32(0x4000801C,"Memory")))
  {
  
    setOptionBytesWriteEnable();
    
    __message "Setting FLASH readout protection";
    
    __writeMemory32(0x00000001, 0x4000402C, "Memory"); //Enable flash clock, needed for wireless line devices
    
    __writeMemory32(0x00000220, 0x40008010, "Memory"); // Option byte erase
    __writeMemory32(0x00000260, 0x40008010, "Memory"); // Start operation
    
    while(0x1 & __readMemory32(0x4000800C,"Memory"));  // Wait while FLASH busy
    
    __writeMemory32(0x00000210, 0x40008010, "Memory"); // Option byte programming
    __writeMemory16(0xFF00, 0x08040800, "Memory");     // Enable readout protection
    
    while(0x1 & __readMemory32(0x4000800C,"Memory"));  // Wait while FLASH busy
    

    __hwReset(0); // Reset to make changes take effect
  
  }
  else
  {
    __message "Readout protection already set";
  }
  
}


readProtectionDisable()
{

  if (0x2 & __readMemory32(0x4000801C,"Memory"))
  {

    setOptionBytesWriteEnable();
    
    __message "Reset FLASH readout protection";
    
    __writeMemory32(0x00000001, 0x4000402C, "Memory"); //Enable flash clock, needed for wireless line devices
    
    __writeMemory32(0x00000220, 0x40008010, "Memory"); // Option byte erase
    __writeMemory32(0x00000260, 0x40008010, "Memory"); // Start operation
    
    while(0x1 & __readMemory32(0x4000800C,"Memory"));  // Wait while FLASH busy
    
    __writeMemory32(0x00000210, 0x40008010, "Memory"); // Option byte programming
    __writeMemory16(0x5AA5, 0x08040800, "Memory");
    
    while(0x1 & __readMemory32(0x4000800C,"Memory"))
    {
    
      __delay(100);
    
    }  // Wait while FLASH busy
    
    __hwReset(0); // Reset to make changes take effect
  
  }
  else
  {
    __message "Readout protection already reset";
  }
  
}


getPersistentQuickLaunchMacros()   // <-- Reserved name, debugger calls it to populate QuickLaunch view.
{
  __message "getPersistentQuickLaunchMacros";
  __var macs;
  
  macs = "unlockFlash()";
  macs += ";lockFlash()";
  macs += ";readProtectionDisable()";
  macs += ";readProtectionEnable()";
  macs += ";setOptionBytesWriteEnable()";
  
  return macs;
}